Please keep all files related to a homework or an assignment within the appropriate directory. Files checked in outside of specific homework or assignment directory will not be reviewed or graded for that homework/assignment.

Check in and modify files as many times as you like. You will not be able to modify the files after the deadline.

You will work as a pair, both of you are responsible for the completed work in all assignments and homework. Reasonable effort is expected from each person. If you do not check in, you will not receive any scores. When pairing please switch who checks in so there is significant number of check in from each of you.

The deadlines are strict, there will be no extensions. Don't email any code to Venkat or to the mailing list. Your last check in before the deadline will be graded. If your last check in breaks the code, both you and your pair will lose significant points.

Please feel free to ask for frequent reviews. See the reviews/readme.txt file for details on how to ask for reviews.

You can evolve the answers and solutions based on the reviews. Only the latest checkin at the time of review will be looked at. Also the final check in will be the only one graded.

You are still responsible to successfully complete an homework or assignment even if your pair is a no-show. You can request to change pairs at any time and if there is another person in the class willing to pair with you we can make the switch.

A lot of help will be provided in this course, but you have to start early and ask for help along the way.                                                                      

Please read the academic honesty policy posted on the course mailing list.                   

The above details apply to all homework and assignments in this course.                   

Now to homework #1.
==============================================================================
HW1: Due 11:59PM CT February 3

Is design dead according to Martin Fowler in 
<http://martinfowler.com/articles/designDead.html>?

Q1. What are some of the main observations he makes about how we should design?

In this article, the author presents his views of how Extreme Programming (XP) works, and his experience with the same. In XP, evolutionary design is used, and he discusses how evolutionary design can be done in XP in his point of view. The author also suggests how developers can use certain design practices such as simple design, refactoring, testing and continuous integration in XP to improve the quality of their design. And how some tools and practices that are generally under-emphasized in XP such as UML diagrams and design patterns can be used.

In evolutionary design, design evolves as the program progresses. There are a lot of tactical decisions taken in ad-hoc, which leads the design to a poor state. A poor design means it is hard to do changes in the code. As a result, effort needed for a change will exponentially increase as the program goes on. Flattening the curve of the cost and the manpower spent on any piece of software is paramount to businesses.

The fundamental assumption is that the curve can be flattened enough for evolutionary design to work. There are some enabling practices in XP which helps to flatten the curve. Testing and continuous integration are the main in such practices. It is impossible to do XP without the safety provided by testing. Continuous integration helps to keep the team in sync.

Refactoring is another important process which helps to flatten the curve. Refactoring can help simplify complex design into simple design. Some tasks are difficult to refactor; We must carefully decide how to implement features, so that they remain modular i.e., they can be modified and extended in the future. This is influenced by experience. In most cases future changes are hard to predict so doing only the relevant change will work. The code must always be kept as clean and simple as possible. In general, no code getting deleted means no refactoring and it could lead code degradation. An eye must be kept on this.

It is important to keep the design simple. A popular slogan in XP ‘You Aren't Going to Need It’ (YAGNI) says that only the features/code that is needed right now should be added. Any feature that you do not need in the present, however easy/cheap it may be to implement, should not be implemented, because there may yet be new information that affects the implementation of the said feature. In case of significant new information, you will have to go back and implement the feature again, which will mean that you spent your time/money for nothing.

It is hard to measure the simplicity, but there are a few criteria proposed in the article. A design that runs all tests, has no duplication, reveals all intention, has the fewest number of classes and methods needed is a simple design. The criteria “Has no duplication” itself will help go a long way in simple design. An advice given in the article is not to get too hung up on simple design while implementing, we can refactor into simple design later.

Popular belief about patterns in XP is that it is under-emphasized, but according to the author it emphasizes more. The idea of doing simple design will lead to design patterns. Design patterns should be used carefully. XP emphasizes not using patterns until it’s needed and evolving your way into a pattern.

The architecture design of the project should be high level. It is good to have an idea of this early, but you should be ready to change it in the future, whenever the need arises. This gives a sense of direction in the early stages, and some early detection of things that could go wrong. At the beginning of each iteration, it is good to have a high-level design up front.

UML diagrams or any design diagram generally is not emphasized in XP. In case UML diagrams are used, make sure they effectively communicate the most important thing. They should be relevant and high level. They should capture only the important classes, methods and flows, not the details. To maintain the diagrams, only use diagrams that can be kept updated and encourage people to update them. UML diagrams can be used in handover situations.

Metaphor in XP is derived from the practice system of names. There is a need to come up with a well-known set of known words that will act as vocabulary in the domain. This system of names can be used to name classes and methods. System of names can be built by building a model for the domain. We should make sure we do not include technical issues in the model. This system of names can be easily understood by domain experts and can be used to communicate with developers.

Avoid irreversibility of decisions. The code (or the design) must be implemented in such a manner that decisions can easily be reversed whenever the need arises. Reversible design allows for the quick detection, as well as quick fixing process of errors; Whenever an error/issue is observed, it can be removed without having to change much of the codebase, which, naturally, reduces the cost as well as the manpower. Determination for reversibility is one of the key reasons to use source code control systems. This gives a sense of relief to developers that changing a code is comparatively and not costly if it is done sooner.

In order for the evolutionary design to work a will to design should be there in people. Through the software development process, there should be a couple of people, who take the responsibility to keep everything (design) moving in the right direction. They need not be the ones to fix the issues, but they should be the ones to get the issues fixed.

In XP, the most important thing a developer can do is pass on as many skills as he can to the junior developers. Technical people should ensure refactoring is happening efficiently and the code quality is not degraded. There is also a suggestion for the clients in the article: The client needs to listen to the technical people; They should be given time to fix issues.

Throughout the article, the author presents several excellent suggestions, as mentioned above. The main points that stand out include the following. The code must be kept as clean and simple as you can. There should be frequent refactoring. Code should be freely deleted and rewritten in case it gets too complex, or is unable to be modified/extended. The features that are required in the current iteration should be the only ones added. Continuous integration, regular testing and refactoring are must.


Q2. Relate these recommendations to your personal experiences, where it may have 
worked or may not have worked for you.

Sanjith Balachandran
In one of my previous projects I have encountered a situation where a complex and more generic UI was proposed in solution design. At a high level the requirement was assigning names for combinations of certain attributes. Proposed solution had support for conditions for evaluating each individual attribute. Conditions such as equal, not equal, greater, lesser. This design was created after the initial pitch meeting with clients. When we carefully assess the actual requirement the condition required is only equal. So we proposed a simpler UI design which will only have combinations of attribute values and for the combination a name can be entered. Basically the conditions will be removed in UI design. It also helps the processing of these combinations in business logic too. There were some discussions among team members about the originally proposed design in terms of future changes, but we went ahead with the simple design for the current requirement. This was a scenario where I practiced YAGNI in my personal experience.

I had a requirement where we had to implement a UI and db entities for creating plan types(flavors of the travel package/items) in the travel booking system. There were different product types e.g. Hotel packages, Ticket, Car rentals, transit. For one of the clients the initial requirement is to just cover the hotel packages not other products. But we knew we must implement later for all product types for another client. We decided to build the UI and DB entities design covering all the product types in mind, because refactoring will have more throw away code. When we had to build the requirement for other product types the change we had to do was very simple and we didn’t throw away any code. Overall this resulted in less development effort and time. In my opinion, this worked for us because we were sure about the future requirement. 

Test Cases being used as design documents. In my previous work project our team inherited an application which was inherited from another team, we were third generation developers for the application. We didn’t have anyone to explain the system. But the application followed TDD, and had very good test coverage and meaningful test cases. So whenever we were in doubt, we used existing test cases to understand the code and system.

Ashutosh Kumar
In my undergrad Database Systems class, for the final project, we were required to create a web app for a flight ticketing system using PostgreSQL database. For the front end, we used Python along with the Flask framework. The backend was implemented with Python as well. Since my partner and I did not have much experience with Flask or PostgresSQL, the recommendation that helped us the most was refactoring. We would implement features. Then, as we learnt more about what the Flask framework offered, we would go back and refactor our code, at times even remove and rewrite certain implementations if we found a better/safer way.

We also followed YAGNI, though somewhat loosely. We would each implement features one-by-one, serially, without confusing ourselves with the code for something that we weren’t implementing in the present.

For another one of my courses, we were required to create a web app for the semester project. The instructor required us to present a UML diagram of our design before we started writing the code. We were asked to keep this UML diagram at a high level and not have minute implementation details in it.
After we started writing the code for the project, since the UML diagram was high level, we did not have to update the UML diagram much by the end of the semester. 

Total [10]: 10

Please see https://www2.cs.uh.edu/~svenkat/spring2023sd/scores.pdf


