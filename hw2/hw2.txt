HW2 Due 11:59PM CT February 10

***Please review the top part of ../hw1/hw1.txt***
***Your chance of success greatly increases if you start very early. Your chance of failure increases if you start late. Please use as many reviews as you possibly can.***

In this homework we'll create an initial strategic design for a version of the Wordle game.

Let's first describe the version of the game that we'll design. We'll not be writing any code in this homework, but only be creating an initial design.

We will work with some restrictions for this game.

The game will allow us to play against only one word "FAVOR" but we will design in a way that the game can easily be extended for other words that a user may be asked to guess.

When the game starts the user is presented with a grid of six rows with 5 boxes in each row. The objective of the game is for the user to guess the word the application has chosen, which in our case is FAVOR. Words can only be 5 letters long.

Initially a "Guess" button is disabled. Once a player enters 5 letters, the button is enabled. If the user removes a character, which they can to change, then the Guess button is disabled again. 

When a player types a letter, it appears in upper case within a box in the currently active row. At the start, the first row is active. If a user presses any key other than a letter, the keystrokes are ignored.

When a user clicks on the "Guess" button the currently active row becomes inactive and any further input by the user will not affect the details on that row. The next row becomes active unless the user has completed all six rows or has won the game.

Once the "Guess" button is clicked, each box in the currently active row changes to a green, yellow, or gray color. It is green if the entered letter is in the exact location as it appears in the word to be guessed. It will be yellow if the letter appears in a different position. It will be gray if the letter is not present in the word to be guessed.

For example, given the word FAVOR, if the user enters RAPID, then the five boxes will have the colors Yellow, Green, GRAY, GRAY, GRAY, respectively.

If the user enters the next guess as MAYOR, the colors will be Gray, Green, Gray, Green, Green, respectively, in the second row.

Once the player wins they can't enter any more guess and will have to quit the game.

If the player guesses on the first try, display "Amazing". If the player guesses on the second try, display "Splendid". If they guess on a third try, display "Awesome". Win on any other tries, display "Yay". If the user fails to guess after six tries, display "It was FAVOR, better luck next time". Of course, if the word being guessed is something other than FAVOR, it will appears instead on that display line.

Create an initial design of this program and answer the questions below. 
Feel free to ask for frequent reviews.

Include a separate file (may be a scan of hand drawn picture if you like, or a pdf, tiff, word document, etc.) which shows a UML diagram of your design. Refer to that diagram from the text description you write here.

1. How would you design this program? 

For this program, we will be designing the Wordle game. In this game, the players have to guess the 5-letter target word chosen by the program; In this iteration of the game, the target word remains the same. The player gets 6 chances to guess the word correctly. When the player inputs his/her guess, the boxes with letters that are in the correct position turn green. Those boxes with letters that are present in the target word, but not in the correct position turn yellow; And those with letters that are not present in the word turn gray.

The Wordle game will require an interactive and dynamic GUI for user input. This GUI will show the result of the player's guesses with colors, which will let the player know whether the letters of their guess were absent from the target word, or if present, if they were in the correct position or not. The backend will validate user input and provide the appropriate color feedback.

The class diagram (HW2_CLASS_DIAGRAM.jpg) for this program includes three classes and 2 enums. One of the classes will be the GUI class, which will be responsible for letting the player input their guess, as well as for displaying the results. This class will dynamically detect whether the user has input all 5 letters or not. When 5 letters are detected, the GUESS button is activated. When there are fewer than 5 letters, the GUESS button is disabled.

The Game class will be responsible for maintaining the state of the game. An instance of this class will be stored in the GUI class. The Game class will store the target word of the game and all the guessed results. It will also have a status (an Enum) field; initially will be set to INPROGRESS. The GUI class will pass the user inputs to the Game classâ€™ "validateGuess" method, which will validate the input. If the word is correct, the status field will be updated to WON. The Game class will have a method to return the number of guesses the player has attempted, depending on which, the success message will be displayed in GUI, in case the user wins. In the case that the player exhausts the number of attempts, the status will be updated to LOST. 

The GuessResult class will have the guessed word for each attempt. And the color status (GREEN, YELLOW, or GRAY) of each letter. A list of GuessResult is stored in Game.

There are 2 enums, one for colors (GREEN, YELLOW, GRAY) and the other one is for game status (LOST, WIN, INPROGRESS).


2. Discuss what language you would use.

We will use Python3.* to create this game. Since this game does not require the speed performance or memory efficiency provided by lower level languages like C++ or Java, Python is sufficient. Another reason for selecting Python is that it is a relatively high-level language, hence the program will be easier to implement than it would be in a relatively lower-level language like C++ or Java. Additionally, we have designed this program to use classes, and Python supports OOP well.

The GUI for the game will be made using Tkinter, which is a Python library. With Tkinter, we can add the color requirements as the specification of the game. Additionally, user input can be read dynamically, by checking for the user input every few milliseconds.


3. How do you plan to structure the program, what libraries would you use?

There will be three classes: the GUI class, the Game class, and the GuessResult class. These all will have their own ".py" files, though they do not need to have separate files. Additionally, there will be a "main.py" file, which will be used to load/start the game.

The GUI for the game will be made using the Python library, Tkinter. This class will contain an instance of the Game class.

For testing, we will use the "unittest" module, provided by Python. It can be used to measure test coverage. We will need a file "test.py", where the unit tests will be written. These unit tests will be written in the form of functions. 

To check the code coverage of the unit tests, we will use the "coverage" tool, which works well with the "unittest" module to calculate how much of the code has been covered by the unit tests.

